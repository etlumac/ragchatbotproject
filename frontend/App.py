import time
import asyncio
import docx
import os
import json
import streamlit as st
from pathlib import Path
from pptx import Presentation
import base64
import streamlit.components.v1 as components
from services.file_manager import index_document, delete_document, safe_filename
from services.supabase_utils import download_file, get_public_url, list_uploaded_files
from services.auth import login_user, register_user

import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "backend")))
from app.routes.chat import chat_with_rag
from app.routes.chat import ChatRequest
from dotenv import load_dotenv
load_dotenv()
from services.supabase_db import (
    fetch_metadata,
    fetch_chat_history,
    save_chat_history,
    delete_metadata,
    delete_chat_history
)

st.set_page_config(layout="wide", page_title="RAGchat")

CHAT_HISTORY_PATH = Path("static/chat_history.json")
METADATA_PATH = Path("static/metadata.json")

SUPPORTED_EXTENSIONS = ("pdf", "docx", "txt", "pptx")


def load_json(filepath):
    if filepath.exists():
        with open(filepath, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

def save_json(filepath, data):
    with open(filepath, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
if "user_id" not in st.session_state:
    st.sidebar.title("–í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    mode = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", ["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    email = st.sidebar.text_input("Email")
    password = st.sidebar.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if mode == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        username = st.sidebar.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if st.sidebar.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            try:
                register_user(username, email, password)
                st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    else:
        if st.sidebar.button("–í–æ–π—Ç–∏"):
            user_id, error = login_user(email, password)
            if user_id:
                st.session_state["user_id"] = user_id
                st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                st.rerun()
            else:
                st.error(error)

    st.stop()  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –≤–æ—à—ë–ª



# Initialize session state
user_id = st.session_state["user_id"]

if "chat_history" not in st.session_state:
    st.session_state["chat_history"] = fetch_chat_history(user_id)

if "metadata" not in st.session_state:
    st.session_state["metadata"] = fetch_metadata(user_id)

if "documents" not in st.session_state:
    st.session_state["documents"] = list_uploaded_files(user_id)

col1, col_mid, col2 = st.columns([1, 0.05, 1])

def display_pdf(file_path):
    with open(file_path, "rb") as f:
        base64_pdf = base64.b64encode(f.read()).decode("utf-8")
    pdf_display = f"""
        <iframe src="data:application/pdf;base64,{base64_pdf}" width="100%" height="800px" type="application/pdf"></iframe>
    """
    st.markdown(pdf_display, unsafe_allow_html=True)


# ==== –ö–û–õ–û–ù–ö–ê 1: –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ====
with col1:
    if st.sidebar.button("üö™ –í—ã—Ö–æ–¥"):
        del st.session_state["user_id"]
        st.rerun()

    st.sidebar.title("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")

    if st.session_state.get("reset_uploader"):
        st.session_state["reset_uploader"] = False

    if "file_uploaded" not in st.session_state:
        st.session_state["file_uploaded"] = False

    uploader_key = f"file_uploader_{time.time()}" if st.session_state.get("reset_uploader") else "file_uploader"

    uploaded_file = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
    type=list(SUPPORTED_EXTENSIONS),
    key=uploader_key
)

    if uploaded_file and uploaded_file.name not in st.session_state["documents"]:
        try:
            #result = index_document(uploaded_file)
            result = index_document(uploaded_file, user_id)
            if "error" in result:
                st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                st.sidebar.success(f"‚úÖ –§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω!")

                st.session_state["documents"].append(uploaded_file.name)
                st.session_state["last_selected_document"] = uploaded_file.name
                st.session_state["file_uploaded"] = True

                # üëá –°–±—Ä–æ—Å file_uploader –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                #st.experimental_set_query_params(file_uploaded="1")
                st.session_state["reset_uploader"] = True
                st.query_params["file_uploaded"] = "1"
                st.rerun()
        except Exception as e:
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
    else:
        # üëá –ï—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ query params, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –∏ file_uploader
        #if st.experimental_get_query_params().get("file_uploaded"):
        if 'file_uploaded' in st.query_params:
            st.session_state["file_uploaded"] = False
            #st.experimental_set_query_params()
            st.query_params.clear()

    selected_document = (
        st.sidebar.selectbox("–¢–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç:", st.session_state["documents"])
        if st.session_state["documents"]
        else None
    )

    if selected_document is not None:
        if "last_selected_document" not in st.session_state or selected_document != st.session_state["last_selected_document"]:
            st.session_state["messages"] = st.session_state["chat_history"].get(
                selected_document,
                [{"role": "ai", "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."}]
            )
            st.session_state["last_selected_document"] = selected_document
    else:
        st.session_state["messages"] = [{"role": "ai", "content": "–ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."}]

    # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
    if selected_document:
        #file_path = download_file(selected_document)
        file_path = download_file(user_id, selected_document)


        if file_path and file_path.exists():
            if selected_document.endswith(".pdf"):
                public_url = get_public_url(user_id, selected_document)
                viewer_url = f"https://docs.google.com/gview?url={public_url}&embedded=true"
                components.html(f'<iframe src="{viewer_url}" width="100%" height="800px" style="border: none;"></iframe>', height=800)

            elif selected_document.endswith(".docx"):
                doc = docx.Document(file_path)
                doc_text = "\n\n".join([para.text.strip() for para in doc.paragraphs if para.text.strip()])
                st.markdown(f'<div style="height:800px; overflow:auto; border:1px solid #ddd; padding:10px;">{doc_text}</div>', unsafe_allow_html=True)

            elif selected_document.endswith(".txt"):
                with open(file_path, "r", encoding="utf-8") as f:
                    content = f.read()
                st.markdown(f'<div style="height:800px; overflow:auto; border:1px solid #ddd; padding:10px;">{content}</div>', unsafe_allow_html=True)

            elif selected_document.endswith(".pptx"):
                prs = Presentation(file_path)
                ppt_text = []
                for slide in prs.slides:
                    for shape in slide.shapes:
                        if hasattr(shape, "text"):
                            ppt_text.append(shape.text.strip())
                full_text = "\n\n".join(ppt_text)
                st.markdown(f'<div style="height:800px; overflow:auto; border:1px solid #ddd; padding:10px;">{full_text}</div>', unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
def delete_chat():
    try:
        #delete_document(selected_document)
        delete_document(selected_document, user_id)

        safe_name = safe_filename(selected_document)

        st.session_state["chat_history"].pop(selected_document, None)
        #delete_chat_history(selected_document)
        delete_chat_history(user_id, safe_name)

        st.session_state["metadata"].pop(safe_name, None)
        #delete_metadata(safe_name)
        delete_metadata(user_id, safe_name)

        st.session_state["documents"].remove(selected_document)
        st.session_state["last_selected_document"] = st.session_state["documents"][0] if st.session_state["documents"] else None

        if not st.session_state["documents"]:
            st.session_state["messages"] = [{"role": "ai", "content": "–ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."}]

         #st.success("‚úÖ –ß–∞—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        time.sleep(10)
    st.rerun()


# ==== –ö–û–õ–û–ù–ö–ê 2: –ß–ê–¢ ====
with col2:
    if selected_document:
        col_buttons = st.columns([0.25, 0.57]) 

        with col_buttons[0]:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"):
                if selected_document in st.session_state["chat_history"]:
                    del st.session_state["chat_history"][selected_document]
                    safe_name = safe_filename(selected_document)
                    save_chat_history(user_id, safe_name, [{"role": "ai", "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."}])
                st.session_state["messages"] = [{"role": "ai", "content": "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–∞—à–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."}]
                st.rerun()

        with col_buttons[1]:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç", key="delete_chat_button"):
                delete_chat()


        chat_container = st.container()
        with chat_container:
            chat_box = st.container(height=650)
            with chat_box:
                for msg in st.session_state["messages"]:
                    with st.chat_message(msg["role"]):
                        st.write(msg["content"])

        user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")

        if user_input:
            st.session_state["messages"].append({"role": "user", "content": user_input})
            with chat_box:
                with st.chat_message("user"):
                    st.write(user_input)

            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."):
                try:
                    #chat_request = ChatRequest(query=user_input, document_name=selected_document)
                    #response = asyncio.run(chat_with_rag(chat_request))

                    chat_request = ChatRequest(query=user_input, document_name=selected_document, user_id=user_id)
                    response = asyncio.run(chat_with_rag(chat_request))

                    assistant_response = response.get("response", "–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    assistant_response = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"

            st.session_state["messages"].append({"role": "ai", "content": assistant_response})
            with chat_box:
                with st.chat_message("ai"):
                    st.write(assistant_response)

            st.session_state["chat_history"][selected_document] = st.session_state["messages"]
            #save_chat_history(selected_document, st.session_state["messages"])
            safe_name = safe_filename(selected_document)
            save_chat_history(user_id, safe_name, st.session_state["messages"])

    #else:
        #st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç.")


