from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from langchain_community.vectorstores import Qdrant as LCQdrant
from langchain_openai import OpenAIEmbeddings
from openai import OpenAI
from qdrant_client import QdrantClient
import os
import json
import traceback
from dotenv import load_dotenv
from slugify import slugify
from typing import List, Tuple
from langchain_qdrant import Qdrant
from qdrant_client.http.models import Filter, FieldCondition, MatchValue

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")

if not OPENAI_API_KEY or not QDRANT_URL or not QDRANT_API_KEY:
    raise ValueError("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—å .env")

READER_MODEL_NAME = "deepseek/deepseek-chat"
COLLECTION_NAME = "documents"
METADATA_PATH = "static/metadata.json"


client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url="https://api.vsegpt.ru/v1"
)

router = APIRouter()

class ChatRequest(BaseModel):
    query: str
    document_name: str
    user_id: str 

def safe_filename(filename: str) -> str:
    name, ext = os.path.splitext(filename)
    return f"{slugify(name)}{ext}"

def load_metadata():
    if os.path.exists(METADATA_PATH):
        with open(METADATA_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def generate_multi_queries(question: str) -> List[str]:
    try:
        prompt = (
            f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –±–æ–ª–µ–µ —á–µ–º 2 —Å–ø–æ—Å–æ–±–∞–≤–º–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å–º—ã—Å–ª: '{question}'. "
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª —Å–ª–æ–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ, –Ω–æ –≤—Å—ë –µ—â—ë —Å–æ—Ö—Ä–∞–Ω—è–ª –∏—Å—Ö–æ–¥–Ω—É—é –∏–¥–µ—é, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª –≤–æ–ø—Ä–æ—Å —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.–£–±–µ—Ä–∏ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –ª–∏—à–Ω–µ–µ –∏ –ø–æ–≤—ã—Å—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        )

        messages = [
            {
                "role": "system",
                "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏."
            },
            {
                "role": "user",
                "content": prompt
            }
        ]

        print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞...")
        completion = client.chat.completions.create(
            model=READER_MODEL_NAME,
            messages=messages,
            temperature=0.7,
            max_tokens=150,
        )

        generated_queries = completion.choices[0].message.content.strip().split("\n")
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {generated_queries}")
        return generated_queries

    except Exception:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:", traceback.format_exc())
        return [question]

def answer_with_rag_multi_query(
    question: str,
    document_name: str,
    user_id: str,  # üëà –¥–æ–±–∞–≤–∏–ª–∏
    qdrant_client: QdrantClient,
    embeddings: OpenAIEmbeddings
) -> Tuple[str, List[str]]:

    print(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {question}")
    document_filter = safe_filename(document_name)

    multi_queries = generate_multi_queries(question)
    all_relevant_docs = []

    filter_condition = Filter(
    must=[
        FieldCondition(
            key="document_id",
            match=MatchValue(value=document_filter)
        ),
        FieldCondition(
            key="user_id",  # üëà –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
            match=MatchValue(value=user_id)
        )
    ]
)


    try:
        # === 1. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∫–∞–º ===
        for query in multi_queries:
            print(f"üîé –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∫–µ: '{query}'")
            query_vector = embeddings.embed_query(query)
            hits = qdrant_client.search(
                collection_name=COLLECTION_NAME,
                query_vector=query_vector,
                limit=10,
                query_filter=filter_condition
            )
            all_relevant_docs.extend([h.payload.get("text", "") for h in hits])

        # === 2. HyDE: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç ===
        print("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç (HyDE)...")
        hyde_prompt = [
            {
                "role": "system",
                "content": (
                    "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                    "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞. "
                    "–ü—Ä–æ—Å—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è."
                )
            },
            {
                "role": "user",
                "content": f"{question}"
            }
        ]
        hyde_completion = client.chat.completions.create(
            model=READER_MODEL_NAME,
            messages=hyde_prompt,
            temperature=0.7,
            max_tokens=300,
        )
        hyde_answer = hyde_completion.choices[0].message.content.strip()
        print(f"üìÑ HyDE –æ—Ç–≤–µ—Ç: {hyde_answer[:200]}...")

        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º HyDE-–æ—Ç–≤–µ—Ç
        hyde_vector = embeddings.embed_query(hyde_answer)

        # –ü–æ–∏—Å–∫ –ø–æ –≤–µ–∫—Ç–æ—Ä—É HyDE
        print("üîé –ü–æ–∏—Å–∫ –ø–æ HyDE-–≤–µ–∫—Ç–æ—Ä—É...")
        hyde_hits = qdrant_client.search(
            collection_name=COLLECTION_NAME,
            query_vector=hyde_vector,
            limit=10,
            query_filter=filter_condition
        )
        all_relevant_docs.extend([h.payload.get("text", "") for h in hyde_hits])

        if not all_relevant_docs:
            return "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.", []

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π)
        context = "\n".join(list(dict.fromkeys(all_relevant_docs)))  # remove duplicates, keep order
        print(f"üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")

        # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ===
        messages = [
            {
                "role": "system",
                "content": (
                    "–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å, –æ—Ç–≤–µ—á–∞—é—â–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
                    "–í–∞—à –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á—ë—Ç–∫–∏–º, —Ç–æ—á–Ω—ã–º –∏ —Å—Ç—Ä–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
                    "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–∞—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ –ø—Ä–∏–π—Ç–∏ –∫ –≤—ã–≤–æ–¥—É.\n\n"

                    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n"
                    "1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.\n"
                    "2. –ù–∞–π–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.\n"
                    "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–æ–ø—Ä–æ—Å—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ö–æ–∂–∏.\n"
                    "4. –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–π—Ç–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.\n\n"
                    
                    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                    "–ö—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø—Ä—è–º–æ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ.\n\n"
                    "–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: —á—Ç–æ –∏—Å–∫–∞–ª–∏, –≥–¥–µ –Ω–∞—à–ª–∏, –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ. –£–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º. "
                    "–£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–∫—É–¥–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –≤–∏–¥–µ /\"–ò—Å—Ç–æ—á–Ω–∏–∫:/\ *—Ç—É—Ç —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*"
                    "–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–¥–º–µ–Ω—ã –ø–æ—Ö–æ–∂–∏—Ö —á–∏—Å–µ–ª –∏–ª–∏ —Ñ–∞–∫—Ç–æ–≤. –ù–µ –¥–µ–ª–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π.\n\n"

                )
            },
            {
                "role": "user",
                "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n---\n–í–æ–ø—Ä–æ—Å: {question}"
            }
        ]

        print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM...")
        completion = client.chat.completions.create(
            model=READER_MODEL_NAME,
            messages=messages,
            temperature=0.1,
        )

        answer = completion.choices[0].message.content.strip()
        return answer, all_relevant_docs

    except Exception:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ `answer_with_rag_multi_query`:", traceback.format_exc())
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", []



@router.post("/chat/")
async def chat_with_rag(request: ChatRequest):
    query = request.query
    document_name = request.document_name
    user_id = request.user_id
    print(f"üì© –ó–∞–ø—Ä–æ—Å: {query} (–î–æ–∫—É–º–µ–Ω—Ç: {document_name})")

    try:
        embeddings = OpenAIEmbeddings(
            model="emb-openai/text-embedding-3-small",
            openai_api_key=OPENAI_API_KEY,
            openai_api_base="https://api.vsegpt.ru/v1",
        )

        qdrant_client = QdrantClient(
            url=QDRANT_URL,
            api_key=QDRANT_API_KEY
        )

        print(f"üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–∏—Å–∫—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ `{COLLECTION_NAME}` —Å —Ñ–∏–ª—å—Ç—Ä–æ–º `{document_name}`...")

        answer, sources = answer_with_rag_multi_query(query, document_name, user_id, qdrant_client, embeddings)

        print(f"‚úÖ –û—Ç–≤–µ—Ç: {answer}")
        return {"response": answer, "sources": sources}

    except HTTPException as http_ex:
        raise http_ex
    except Exception:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ `chat_with_rag`:", traceback.format_exc())
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")


